# -*- coding: utf-8 -*-
"""WOAH notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TIlHQGu8ofbkqMAoF1W1NVVYQNvxkb--
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = '/content/Sample data_Hackathon.csv'
data = pd.read_csv(file_path)

data.head()

data.isnull().sum()

# Drop irrelevant or empty columns
data_cleaned = data.drop(columns=['sub location', 'Unnamed: 10', 'Test Used'], errors='ignore')

# Convert relevant columns to datetime (if applicable)
data_cleaned['Date of Start of Outbreak/Event'] = pd.to_datetime(data_cleaned['Date of Start of Outbreak/Event'], errors='coerce', format='%d')

# Group by month and year for disease occurrences
trend_data = data_cleaned.groupby(['year', 'month']).size().reset_index(name='Outbreak Count')


custom_month_order = [
    'November', 'December']

# Ensure the 'month' column follows this order
trend_data['month'] = pd.Categorical(trend_data['month'], categories=custom_month_order, ordered=True)

# Plot the trends over time
plt.figure(figsize=(12, 6))
sns.lineplot(data=trend_data, x='month', y='Outbreak Count', hue='year', marker='o')
plt.title('Disease Outbreak Trends Over Time')
plt.xticks(rotation=45)
plt.show()

# Summarize total cases, deaths, and vaccinations
cases_summary = data_cleaned[['Number Sick', 'Number Dead', 'Number Vaccinated']].sum()
print(cases_summary)

# Most common diseases and their occurrences
disease_counts = data_cleaned['Disease/Condition'].value_counts()

print("\nTop Diseases by Occurrence:")
print(disease_counts)

# Plot top diseases
plt.figure(figsize=(12, 6))
disease_counts.head(10).plot(kind='bar', color='teal')
plt.title('Top 10 Diseases by Occurrence')
plt.xlabel('Disease/Condition')
plt.ylabel('Number of Occurrences')
plt.show()

# Count usage of each control method
control_methods = data['Disease Control Method'].explode().value_counts()

# Plot control methods
plt.figure(figsize=(10, 6))
control_methods.plot(kind='bar', color='lightgreen')
plt.title('Control Method Usage')
plt.xlabel('Control Method')
plt.ylabel('Frequency')
plt.show()

# Hotspot identification (outbreaks by county)
hotspots = data['County'].value_counts()

# Plot hotspots
plt.figure(figsize=(10, 6))
hotspots.plot(kind='bar', color='skyblue')
plt.title('Outbreak Hotspots by County')
plt.xlabel('County')
plt.ylabel('Number of Outbreaks')
plt.show()

# Vaccination coverage
data['Total Animals'] = data['Number Sick'] + data['Number Dead'] + data['Number Destroyed']
vaccination_coverage = (data['Number Vaccinated'].sum() / data['Total Animals'].sum()) * 100
print(f"Vaccination Coverage: {vaccination_coverage:.2f}%")

import folium

# Create map
map = folium.Map(location=[data['Latitude'].mean(), data['Longitude'].mean()], zoom_start=6)

# Add points
for _, row in data.iterrows():
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=f"{row['County']}, {row['Ward']} ({row['Locality']})"
    ).add_to(map)

map.save("outbreak_map.html")